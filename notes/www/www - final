#!/usr/bin/env node
/**
 * Module dependencies.
 */
// בקובץ זה מוגדרות כל ההגדרות של ההאזנות לשרת
// המשתנה app מכיל את כל היכולות המצויות בקובץ app.js באמצעות חיבורו
const app = require('../app')
// המשתנה debug מכיל את כל היכולות של המודול באמצעות חיבורו
const debug = require('debug')
// המשתנה http מכיל את כל היכולות של המודול באמצעות חיבורו
const http = require('http')
// המשתנה models מכיל את כל היכולות המצויות בקבצים המצויים בתיקיית models באמצעות חיבורה
const models = require('../models')

/**
 * Get port from environment and store in Express.
 */
// המשתנה port מפעיל את הפונקציה normalizePort שבאמצעותה מתאפשר לבדוק לאיזה port השרת של אקספרס יאזין ואם ה- port תקין, ולמעשה המשתנה port מכיל את החיבור ל- port שהשרת של אקספרס מאזין לו, כאשר ה- port שמספרו 3000 מוגדר כברירת מחדל
const port = normalizePort( process.env.PORT || '3000' )
app.set('port', port)

/**
 * Create HTTP server.
 */
// המשתנה server מפעיל את הפונקציה createServer (שמקבלת את המשתנה app המכיל את היכולות המצויות בקובץ app.js) המצויה תחת המשתנה http מתאפשר ליצור את החיבור לשרת, ולמעשה המשתנה server מכיל את החיבור לשרת
const server = http.createServer( app )

// הפעלה של הפונקציה sync המצויה תחת ה- models של sequelize, ולאחר מכן, מאחר ואנו מבצעים שימוש ב- sequelize שהוא מודול המבוסס על promise, נפעיל promise שפונקציית ה- callback שלו (המסומנת כפונקציית חץ) מבצעת האזנה ל- port מסוים של השרת ומציגה הודעה לאיזה פורט השרת שאקספרס מבצע בו שימוש מאזין
models.sequelize.sync().then(() => {
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen( port, () => {
        debug('Express server listening on port ' + server.address().port)
    })

    // הפעלה של הפונקציה on המצויה תחת המשתנה server וכאשר ה- event בשם error הופעל, תופעל הפונקציה onError שבאמצעותה מתאפשר לזרוק הודעת שגיאה מהשרת כאשר יש שגיאה
    server.on('error', onError)
    // הפעלה של הפונקציה on המצויה תחת המשתנה server וכאשר ה- event בשם listening הופעל, תופעל הפונקציה onListening שבאמצעותה מתאפשר להציג הודעה לאיזו כתובת ו- port השרת של אקספרס מבצע האזנה
    server.on('listening', onListening)
})

/**
 * Normalize a port into a number, string, or false.
 */
// באמצעות הפונקציה normalizePort (שמקבלת את המשתנה val המכיל את הערך) מתאפשר לבדוק לאיזה port אליו השרת של אקספרס יאזין ואם ה- port תקין
function normalizePort( val ) {
    let port = parseInt( val, 10 )

    // named pipe
    if ( isNaN( port ) )
        return val

    // port number
    if ( port >= 0 )
        return port

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */
// באמצעות הפונקציה onError (שמקבלת את המשתנה error המכיל את הודעת השגיאה) מתאפשר לזרוק הודעת שגיאה מהשרת כאשר יש שגיאה
function onError( error ) {
    if ( error.syscall !== 'listen' )
        throw error

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch ( error.code ) {
        case 'EACCES':
            console.error( bind + ' requires elevated privileges' )
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error( bind + ' is already in use' )
            process.exit(1)
            break
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
// באמצעות הפונקציה onListening מתאפשר להציג הודעה לאיזו כתובת ו- port השרת של אקספרס מבצע האזנה
function onListening() {
    let address = server.address()
    let bind = typeof address === 'string'
        ? 'pipe ' + address
        : 'port ' + address.port
    debug('Listening on ' + bind)
}