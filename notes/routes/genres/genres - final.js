// קובץ זה מכיל בצורה מרוכזת את כל הבקשות השונות לנתיבים הקשורים ב- REST API לז'אנרים
// המשתנה express מכיל את כל היכולות של המודול באמצעות חיבורו
const express = require('express')
// המשתנה router מפעיל את הפונקציה Router המצויה תחת המשתנה express ושבאמצעותה מתאפשר לשלוח בקשות שונות לבניית הנתיבים
const router = express.Router()
// המשתנה models מכיל את כל היכולות המצויות בקבצים המצויים בתיקיית models באמצעות חיבורה
const models = require('../models')
// המשתנה GenreModel מכיל את המודל של Genre המצוי תחת המשתנה models
const GenreModel = models.Genre

// ביצוע בקשת get המביאה את כל הז'אנרים, ובכך מתאפשר להביא את כל הנתונים הקשורים לז'אנרים ממסד הנתונים
router.get('/', function ( req, res ) {
    // בבקשה אנו מוצאים את כל הנתונים הקיימים במשתנה GenreModel (המכיל את המודל של Genre המצוי תחת המשתנה models), ומאחר ואנו מבצעים שימוש ב- sequelize שהוא מודול המבוסס על promise, נפעיל promise שפונקציית ה- callback שלו (המסומנת כפונקציית חץ) מקבלת את המשתנה results המכיל את התוצאות שקיבלנו ומבצעת מספר פעולות
    GenreModel.findAll().then(results => {
        // נבדוק את אורך הנתונים המצויים במשתנה results ואם כמות התוצאות היא 0, אז נבצע מספר פעולות
        if ( results.length === 0 )
            // שליחה של הודעת שגיאה עם הסטטוס קוד 204 (No Content) האומרת שמסד הנתונים עיבד בהצלחה את הבקשה, אך אינו מחזיר תוכן
            res.status(204).send()
        // אחרת, כלומר יש נתונים במשתנה results והמשתנה results מכיל תוצאות, אז נבצע מספר פעולות
        else
            // שליחה של תשובת json המכילה את כל הנתונים המצויים במשתנה results
            res.json( results )
    })
})

// ביצוע בקשת get לפי המזהה הייחודי של הז'אנר, ובכך מתאפשר להביא נתונים של ז'אנר ספציפי ממסד הנתונים לפי המזהה הייחודי שלו
router.get('/:genre_id', function ( req, res ) {
    // המשתנה genre_id מכיל את המזהה הייחודי של הז'אנר
    let genre_id = req.params.genre_id

    // בבקשה אנו מוצאים את כל הנתונים הקיימים במשתנה GenreModel (המכיל את המודל של Genre המצוי תחת המשתנה models) לפי המזהה הייחודי של הז'אנר, ומאחר ואנו מבצעים שימוש ב- sequelize שהוא מודול המבוסס על promise, נפעיל promise שפונקציית ה- callback שלו (המסומנת כפונקציית חץ) מקבלת את המשתנה result המכיל את התוצאה שקיבלנו ומבצעת מספר פעולות
    GenreModel.findById( genre_id ).then(result => {
        // נבדוק אם המשתנה result ריק מתוכן, אז נבצע מספר פעולות
        if ( result === null )
            // שליחה של הודעת שגיאה עם הסטטוס קוד 204 (No Content) האומרת שמסד הנתונים עיבד בהצלחה את הבקשה, אך אינו מחזיר תוכן
            res.status(204).send()
        // אחרת, כלומר יש נתונים במשתנה result והמשתנה result לא ריק מתוכן, אז נבצע מספר פעולות
        else
            // שליחה של תשובת json המכילה את כל הנתונים המצויים במשתנה result
            res.json( result )
    })
})

// ביצוע בקשת get לנתיב של ההצעות האפשריות לתוצאות החיפוש, ובכך מתאפשר להביא את כל הנתונים של ההצעות האפשריות לתוצאות החיפוש ממסד הנתונים
router.get('/suggestions/:term', function ( req, res ) {
    // המשתנה term מכיל את הנתונים שהוזנו ושלגביהם מתקבלות ההצעות האפשריות של תוצאות החיפוש
    let term = req.params.term

    // בבקשה אנו מוצאים את כל הנתונים הקיימים במשתנה GenreModel (המכיל את המודל של Genre המצוי תחת המשתנה models) איפה שמצויים הנתונים של השדה genre_name בהתאם לנתונים המצויים במשתנה term
    GenreModel.findAll({
        where: {
            genre_name: {
                $like: `%${term}%`
            }
        }
    // מאחר ואנו מבצעים שימוש ב- sequelize שהוא מודול המבוסס על promise, נפעיל promise שפונקציית ה- callback שלו (המסומנת כפונקציית חץ) מקבלת את המשתנה results המכיל את התוצאות שקיבלנו ומבצעת מספר פעולות
    }).then(results => {
        // נבדוק את אורך הנתונים המצויים במשתנה results ואם כמות התוצאות היא 0, אז נבצע מספר פעולות
        if ( results.length === 0 )
            // שליחה של הודעת שגיאה עם הסטטוס קוד 204 (No Content) האומרת שמסד הנתונים עיבד בהצלחה את הבקשה, אך אינו מחזיר תוכן
            res.status(204).send()
        // אחרת, כלומר יש נתונים במשתנה results והמשתנה results מכיל תוצאות, אז נבצע מספר פעולות
        else
            // שליחה של תשובת json המכילה את כל הנתונים המצויים במשתנה results
            res.json({ results })
    })
})

// ביצוע בקשת post שבאמצעותה מתאפשר ליצור ז'אנר חדש במסד הנתונים
router.post('/', function ( req, res ) {
    // המשתנה genre מכיל את הגוף של הבקשה
    let genre = req.body

    // בבקשה אנו יוצרים ז'אנר חדש לפי הסכימה של הז'אנר המצוי במשתנה GenreModel (המכיל את המודל של Genre המצוי תחת המשתנה models)
    GenreModel.create( genre )
        // מאחר ואנו מבצעים שימוש ב- sequelize שהוא מודול המבוסס על promise, נפעיל promise שפונקציית ה- callback שלו (המסומנת כפונקציית חץ) מקבלת את המשתנה result המכיל את התוצאה שקיבלנו ומבצעת מספר פעולות
        .then(result =>
            // שליחה של הודעה עם הסטטוס קוד 201 (Created) האומרת שהנתונים המבוקשים נוצרו עם תשובת json המכילה את המזהה הייחודי של הז'אנר שנוצר
            res.status(201).json({ genre_id: result.genre_id }))
        // במידה ויש שגיאה המונעת מאיתנו לשמור את הז'אנר, נתפוס את השגיאה ונפעיל promise שפונקציית ה- callback שלו (המסומנת כפונקציית חץ) מקבלת את המשתנה err המכיל את השגיאה שקיבלנו ומבצעת מספר פעולות
        .catch(err => {
            // המשתנה errors מכיל את השגיאה שקיבלנו
            let errors = err.errors[0]
            // שליחה של הודעת שגיאה עם הסטטוס קוד 422 (Unprocessable Entity) האומרת שמסד הנתונים מבין את סוג התוכן של יישות הבקשה, אך לא הצליח לעבד את ההוראות הכלולות בו מאחר ולא ניתן ליצור את הז'אנר עם פירוט של תשובת json המכילה הודעת שגיאה מתאימה
            res.status(422).json({
                error: 'Unable to create genre',
                reason: {
                    message: errors.message,
                    error: `${errors.path} '${errors.value}' already exists`
                }
            })
        })
})

// ייצוא היכולות של המודול router החוצה
module.exports = router